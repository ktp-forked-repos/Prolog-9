%%% Project 1
%%% Ex.2 (Recursive Functions)




%%% fn/3
%%% fn(N,K,R)


fn(0,0,0).		
fn(0,_,0).		
fn(_,0,0).		


fn(N,N,R):-		
	R is N*N.


fn(N,K,R):-		
	N>K,		
	N1 is N-1,	
	fn(N1,K,R1),	
	R is R1*N.	


fn(N,K,R):-		
	N<K,
	K1 is K-1,
	fn(N,K1,R1),
	R is R1*K.




%%% Project 1
%%% Ex.3 (Google Alien Language)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Q. a
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% generate_word/2
%%% generate_word(Pattern,Word)
%%% Succeeds if given a Pattern, it unifies 
%%% the argument Word with a possible word


				

generate_word([], []).


generate_word([Head|Pattern], [Head|Word]):-		
	atom(Head),					
	generate_word(Pattern,Word).

			

generate_word([Head|Pattern], [W|Word]):-		
	member(W,Head),					
	generate_word(Pattern, Word).		





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Q. b
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% count_words/2
%%% count_words(Pattern,Count)
%%% Succeds if Count is the number of possible
%%% words that can be generated by Pattern


count_words(Pattern,Count):-
	findall(X,generate_word(Pattern,X),Results),
	Count is length(Results).
	
	
%%% Project 1
%%% Ex.4 (Lists)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Q. a
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% split_list/4
%%% split_list(Limit,List,High,Low)
%%% Succeeds if the list High contains all the elements of the 
%%% list List that are >= Limit, and the list Low contains all the
%%% elements of the list List that are < Limit.


split_list(_,[],[],[]).		

split_list(Limit,[ListHead|List],[ListHead|High],Low):-	
	ListHead >= Limit,
	!,
	split_list(Limit,List,High,Low).



split_list(Limit,[ListHead|List],High,[ListHead|Low]):-
	split_list(Limit,List,High,Low).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Q. b
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% split_list_alt/4
%%% split_list_alt(Limit,List,High,Low)
%%% Succeeds if the list High contains all the elements of the 
%%% list List that are >= Limit, and the list Low contains all the
%%% elements of the list List that are < Limit.



split_list_alt(Limit,List,High,Low):-
	findall(X,(member(X,List),X >= Limit),High), 
	findall(Y,(member(Y,List),Y < Limit),Low).

